/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cn.com.xiaofabo.scia.aiaward.gui;

import cn.com.xiaofabo.scia.aiaward.entities.ArbitrationApplication;
import cn.com.xiaofabo.scia.aiaward.entities.DocProcess;
import cn.com.xiaofabo.scia.aiaward.entities.ArbitrationRoutine;
import cn.com.xiaofabo.scia.aiaward.fileprocessor.ApplicationDocReader;
import cn.com.xiaofabo.scia.aiaward.fileprocessor.AwardDocGenerator;
import cn.com.xiaofabo.scia.aiaward.fileprocessor.EvidenceDocReader;
import cn.com.xiaofabo.scia.aiaward.fileprocessor.RespondDocReader;
import cn.com.xiaofabo.scia.aiaward.fileprocessor.RoutineDocReader;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.filechooser.FileFilter;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

/**
 *
 * @author 陈光曦
 */
public class MainWindow extends javax.swing.JFrame {

    static Logger logger = Logger.getLogger(MainWindow.class.getName());
    private static final String COPYRIGHT_INFO = "AI裁决书生成器 v0.1.180109 （单机试用版）\n深圳小法博科技有限公司\n版权所有 2018";

    FileFilter docFileFilter;
    String currentSelectedDirectory;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        PropertyConfigurator.configure("log/config.txt");
        logger.trace("Constructor of MainWindow");
        initComponents();
        initMyComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        bn_chooseRoutineDoc = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        bn_chooseApplicationDoc = new javax.swing.JButton();
        bn_addAppEvidenceDoc = new javax.swing.JButton();
        bn_chooseResDoc = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        bn_chooseOutputFolder = new javax.swing.JButton();
        bn_generateOutDoc = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        bn_rmAppEvidenceDoc = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        bn_addResEvidenceDoc = new javax.swing.JButton();
        bn_rmResEvidenceDoc = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane4 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane6.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AI智能裁决书");
        setResizable(false);
        setSize(new java.awt.Dimension(1024, 768));

        jTextPane1.setFocusable(false);
        jScrollPane1.setViewportView(jTextPane1);

        bn_chooseRoutineDoc.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        bn_chooseRoutineDoc.setText("选择文件");
        bn_chooseRoutineDoc.setToolTipText("");
        bn_chooseRoutineDoc.setName(""); // NOI18N
        bn_chooseRoutineDoc.setPreferredSize(new java.awt.Dimension(90, 30));
        bn_chooseRoutineDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bn_chooseRoutineDocMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("程序部分");

        jTextPane2.setFocusable(false);
        jScrollPane2.setViewportView(jTextPane2);

        jTextPane3.setFocusable(false);
        jScrollPane3.setViewportView(jTextPane3);

        bn_chooseApplicationDoc.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        bn_chooseApplicationDoc.setText("选择文件");
        bn_chooseApplicationDoc.setToolTipText("");
        bn_chooseApplicationDoc.setName(""); // NOI18N
        bn_chooseApplicationDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bn_chooseApplicationDocMouseClicked(evt);
            }
        });

        bn_addAppEvidenceDoc.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        bn_addAppEvidenceDoc.setText("添加文件");
        bn_addAppEvidenceDoc.setToolTipText("");
        bn_addAppEvidenceDoc.setName(""); // NOI18N
        bn_addAppEvidenceDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bn_addAppEvidenceDocMouseClicked(evt);
            }
        });

        bn_chooseResDoc.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        bn_chooseResDoc.setText("选择文件");
        bn_chooseResDoc.setToolTipText("");
        bn_chooseResDoc.setName(""); // NOI18N
        bn_chooseResDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bn_chooseResDocMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("仲裁申请书");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("申请人证据");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("答辩状");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("生成裁决书目录");

        bn_chooseOutputFolder.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        bn_chooseOutputFolder.setText("选择文件夹");
        bn_chooseOutputFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bn_chooseOutputFolderMouseClicked(evt);
            }
        });

        bn_generateOutDoc.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        bn_generateOutDoc.setText("生成裁决书");
        bn_generateOutDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bn_generateOutDocMouseClicked(evt);
            }
        });

        jScrollPane7.setViewportView(jList2);

        bn_rmAppEvidenceDoc.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        bn_rmAppEvidenceDoc.setText("删除文件");
        bn_rmAppEvidenceDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bn_rmAppEvidenceDocMouseClicked(evt);
            }
        });

        jList3.setPreferredSize(new java.awt.Dimension(40, 102));
        jScrollPane8.setViewportView(jList3);

        bn_addResEvidenceDoc.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        bn_addResEvidenceDoc.setText("添加文件");
        bn_addResEvidenceDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bn_addResEvidenceDocMouseClicked(evt);
            }
        });

        bn_rmResEvidenceDoc.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        bn_rmResEvidenceDoc.setText("删除文件");
        bn_rmResEvidenceDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bn_rmResEvidenceDocMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("被申请人证据");

        jScrollPane4.setViewportView(jTextPane4);

        jMenuBar1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jMenu1.setText("帮助");
        jMenu1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jMenuItem1.setText("关于软件");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseReleased(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(432, 432, 432)
                .addComponent(bn_generateOutDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane8)
                    .addComponent(jScrollPane4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(bn_chooseRoutineDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bn_addResEvidenceDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bn_chooseResDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bn_rmAppEvidenceDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bn_addAppEvidenceDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bn_chooseApplicationDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bn_rmResEvidenceDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(bn_chooseOutputFolder)
                        .addGap(37, 37, 37))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(bn_chooseRoutineDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(bn_chooseApplicationDoc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bn_addAppEvidenceDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bn_rmAppEvidenceDoc))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bn_chooseResDoc))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bn_addResEvidenceDoc)
                        .addGap(18, 18, 18)
                        .addComponent(bn_rmResEvidenceDoc))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bn_chooseOutputFolder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(bn_generateOutDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initMyComponents() {
        currentSelectedDirectory = "./";

        docFileFilter = new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".doc") || filename.endsWith(".docx");
                }
            }

            @Override
            public String getDescription() {
                return "*.doc *.docx";
            }
        };

        ListModel listModel1 = new DefaultListModel();
        ListModel listModel2 = new DefaultListModel();
        jList2.setModel(listModel1);
        jList3.setModel(listModel2);
    }

    private void bn_chooseRoutineDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bn_chooseRoutineDocMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("./"));
        chooser.setFileFilter(docFileFilter);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            currentSelectedDirectory = selectedFile.getAbsolutePath();
            jTextPane1.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_bn_chooseRoutineDocMouseClicked

    private void bn_chooseApplicationDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bn_chooseApplicationDocMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(currentSelectedDirectory));
        chooser.setFileFilter(docFileFilter);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            currentSelectedDirectory = selectedFile.getAbsolutePath();
            jTextPane2.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_bn_chooseApplicationDocMouseClicked

    private void bn_addAppEvidenceDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bn_addAppEvidenceDocMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(currentSelectedDirectory));
        chooser.setFileFilter(docFileFilter);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            DefaultListModel dfm = (DefaultListModel) jList2.getModel();
            dfm.addElement(selectedFile.getAbsolutePath());
            currentSelectedDirectory = selectedFile.getAbsolutePath();
        }
    }//GEN-LAST:event_bn_addAppEvidenceDocMouseClicked

    private void bn_chooseResDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bn_chooseResDocMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(currentSelectedDirectory));
        chooser.setFileFilter(docFileFilter);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            jTextPane3.setText(selectedFile.getAbsolutePath());
            currentSelectedDirectory = selectedFile.getAbsolutePath();
        }
    }//GEN-LAST:event_bn_chooseResDocMouseClicked

    private void bn_chooseOutputFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bn_chooseOutputFolderMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(currentSelectedDirectory));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFolder = chooser.getSelectedFile();
            String file = selectedFolder.getAbsolutePath() + "\\" + generateOutFileName();
            jTextPane4.setText(file);
            currentSelectedDirectory = selectedFolder.getAbsolutePath();
        }
    }//GEN-LAST:event_bn_chooseOutputFolderMouseClicked

    private void bn_generateOutDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bn_generateOutDocMouseClicked
        logger.info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        logger.info("++++++++++++++++++++Generation Starts++++++++++++++++++++");

        String routineDocPath = jTextPane1.getText();
        String applicationDocPath = jTextPane2.getText();
        List<String> eAppList = new LinkedList<>();
        DefaultListModel dlm = (DefaultListModel) jList2.getModel();
        for (int i = 0; i < dlm.getSize(); ++i) {
            eAppList.add((String) dlm.getElementAt(i));
        }
        String responseDocPath = jTextPane3.getText();
        List<String> eResList = new LinkedList<>();
        dlm = (DefaultListModel) jList3.getModel();
        for (int i = 0; i < dlm.getSize(); ++i) {
            eResList.add((String) dlm.getElementAt(i));
        }
        String outDocPath = jTextPane4.getText();

        DocProcess dp = new DocProcess(routineDocPath, applicationDocPath, eAppList, responseDocPath, eResList, outDocPath);

        String inRoutinePath = dp.getInRoutineDocUrl();
        String inAppPath = dp.getInApplicationDocUrl();
        List inAppEvidencePathList = dp.getInAppEvidenceDocUrlList();
        String inResPath = dp.getInRespondDocUrl();
        List inResEvidencePathList = dp.getInResEvidenceDocUrlList();
        String outAwardPath = dp.getOutAwardDocUrl();

        /// GUI errors
        boolean fatalError = false;

        StringBuilder errorMessage = new StringBuilder();
        StringBuilder warningMessage = new StringBuilder();

        File outFile = new File(outAwardPath);
        if (outFile.exists()) {
            warningMessage.append("裁决书文件已存在");
            warningMessage.append("\n");
        }

        if (inRoutinePath == null || inRoutinePath.isEmpty()) {
            fatalError = true;
            errorMessage.append("裁决书程序文件缺失\n");
            logger.fatal("裁决书程序文件缺失");
        }

        if (inAppPath == null || inAppPath.isEmpty()) {
            fatalError = true;
            errorMessage.append("仲裁申请文件缺失\n");
            logger.fatal("仲裁申请文件缺失");
        }

        if (outAwardPath == null || outAwardPath.isEmpty()) {
            fatalError = true;
            errorMessage.append("输出裁决书文件地址未定义\n");
            logger.fatal("输出裁决书文件地址未定义");
        }

        if (fatalError) {
            logger.fatal("FATAL ERROR occurred. Abort!");
            ErrorDialog ed = new ErrorDialog(this, rootPaneCheckingEnabled);
            ed.setErrorLabel(errorMessage.toString());
            ed.setLocationRelativeTo(this);
            ed.setVisible(true);
            return;
        }

        ArbitrationRoutine routine = null;
        ArbitrationApplication aApplication = null;
        List aeAppList = null;
        String respondContent = null;
        List reAppList = null;

        try {
            RoutineDocReader rdr = new RoutineDocReader();
            routine = rdr.processRoutine(inRoutinePath);
            for (int i = 0; i < rdr.getErrorToUser().size(); ++i) {
                errorMessage.append(rdr.getErrorToUser().get(i));
                errorMessage.append("\n");
            }
            for (int i = 0; i < rdr.getWarningToUser().size(); ++i) {
                warningMessage.append(rdr.getWarningToUser().get(i));
                warningMessage.append("\n");
            }
        } catch (IOException e) {
            errorMessage.append("读取程序文件错误");
            errorMessage.append("\n");
        }
        try {
            ApplicationDocReader adr = new ApplicationDocReader();
            aApplication = adr.processApplication(inAppPath);
            for (int i = 0; i < adr.getErrorToUser().size(); ++i) {
                errorMessage.append(adr.getErrorToUser().get(i));
                errorMessage.append("\n");
            }
            for (int i = 0; i < adr.getWarningToUser().size(); ++i) {
                warningMessage.append(adr.getWarningToUser().get(i));
                warningMessage.append("\n");
            }
        } catch (IOException e) {
            errorMessage.append("读取申请书文件错误");
            errorMessage.append("\n");
        }
        try {
            EvidenceDocReader aedr = new EvidenceDocReader();
            aeAppList = aedr.getEvidenceList(inAppEvidencePathList);
            for (int i = 0; i < aedr.getErrorToUser().size(); ++i) {
                errorMessage.append(aedr.getErrorToUser().get(i));
                errorMessage.append("\n");
            }
            for (int i = 0; i < aedr.getWarningToUser().size(); ++i) {
                warningMessage.append(aedr.getWarningToUser().get(i));
                warningMessage.append("\n");
            }
        } catch (IOException e) {
            errorMessage.append("读取申请人证据目录文件错误");
            errorMessage.append("\n");
        }
        try {
            RespondDocReader resdr = new RespondDocReader();
            respondContent = resdr.processRespond(inResPath);
            for (int i = 0; i < resdr.getErrorToUser().size(); ++i) {
                errorMessage.append(resdr.getErrorToUser().get(i));
                errorMessage.append("\n");
            }
            for (int i = 0; i < resdr.getWarningToUser().size(); ++i) {
                warningMessage.append(resdr.getWarningToUser().get(i));
                warningMessage.append("\n");
            }
        } catch (IOException e) {
            errorMessage.append("读取被申请人答辩书文件错误");
            errorMessage.append("\n");
        }
        try {
            EvidenceDocReader redr = new EvidenceDocReader();
            reAppList = redr.getEvidenceList(inResEvidencePathList);
            for (int i = 0; i < redr.getErrorToUser().size(); ++i) {
                errorMessage.append(redr.getErrorToUser().get(i));
                errorMessage.append("\n");
            }
            for (int i = 0; i < redr.getWarningToUser().size(); ++i) {
                warningMessage.append(redr.getWarningToUser().get(i));
                warningMessage.append("\n");
            }
        } catch (IOException e) {
            errorMessage.append("读取被申请人证据目录文件错误");
            errorMessage.append("\n");
        }

        if (routine == null) {
            errorMessage.append("无法读取程序部分");
            errorMessage.append("\n");
        }
        if (aApplication == null) {
            errorMessage.append("无法读取申请书");
            errorMessage.append("\n");
        }
        if (aeAppList == null || aeAppList.isEmpty()) {
            warningMessage.append("无有效申请证据");
            warningMessage.append("\n");
        }
        if (respondContent == null) {
            warningMessage.append("无有效答辩书");
            warningMessage.append("\n");
        }
        if (reAppList == null || reAppList.isEmpty()) {
            warningMessage.append("无有效答辩证据");
            warningMessage.append("\n");
        }

        logger.error("All error messages: " + errorMessage);
        logger.warn("All warning messages: " + warningMessage);

        if (!errorMessage.toString().isEmpty()) {
            ErrorDialog ed = new ErrorDialog(this, rootPaneCheckingEnabled);
            ed.setErrorLabel(errorMessage.toString());
            ed.setLocationRelativeTo(this);
            ed.setVisible(true);
            return;
        }

        if (!warningMessage.toString().isEmpty()) {
            WarningDialog wd = new WarningDialog(this, rootPaneCheckingEnabled);
            wd.setWarningLabel(warningMessage.toString());
            wd.setLocationRelativeTo(this);
            wd.setVisible(true);
            if (!wd.isProceed()) {
                return;
            }
        }

        if (outFile.exists()) {
            int yesNo = JOptionPane.showConfirmDialog(this, "裁决书文件已存在，确认覆盖？", "确认覆盖文件", JOptionPane.YES_NO_OPTION);
            System.err.println(yesNo);
            logger.debug("Overwrite file? " + yesNo);
            if (yesNo == 1) {
                return;
            }
        }

        AwardDocGenerator awardGen = new AwardDocGenerator(outAwardPath);
        XWPFDocument generatedAwardDoc = awardGen.generateAwardDoc(routine, aApplication, aeAppList, respondContent, reAppList);

        /// Successful
        if (generatedAwardDoc != null) {
            JOptionPane.showMessageDialog(this, "成功生成裁决书！\n" + outAwardPath, "成功生成裁决书", JOptionPane.INFORMATION_MESSAGE);
            logger.info("成功生成裁决书：" + outAwardPath);
        } else {

        }

        logger.info("--------------------Generation Ends--------------------");
    }//GEN-LAST:event_bn_generateOutDocMouseClicked

    private void bn_rmAppEvidenceDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bn_rmAppEvidenceDocMouseClicked
        int selectedIdx = jList2.getSelectedIndex();
        if (selectedIdx >= 0) {
            DefaultListModel dfm = (DefaultListModel) jList2.getModel();
            dfm.removeElementAt(selectedIdx);
        }
    }//GEN-LAST:event_bn_rmAppEvidenceDocMouseClicked

    private void bn_addResEvidenceDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bn_addResEvidenceDocMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(currentSelectedDirectory));
        chooser.setFileFilter(docFileFilter);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            DefaultListModel dfm = (DefaultListModel) jList3.getModel();
            dfm.addElement(selectedFile.getAbsolutePath());
            currentSelectedDirectory = selectedFile.getAbsolutePath();
        }
    }//GEN-LAST:event_bn_addResEvidenceDocMouseClicked

    private void bn_rmResEvidenceDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bn_rmResEvidenceDocMouseClicked
        int selectedIdx = jList3.getSelectedIndex();
        if (selectedIdx >= 0) {
            DefaultListModel dfm = (DefaultListModel) jList3.getModel();
            dfm.removeElementAt(selectedIdx);
        }
    }//GEN-LAST:event_bn_rmResEvidenceDocMouseClicked

    private void jMenuItem1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseReleased
        JOptionPane.showMessageDialog(this, COPYRIGHT_INFO, "关于", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1MouseReleased

    private String generateOutFileName() {
        Date now;
        String result;
        SimpleDateFormat formatter;

        formatter = new SimpleDateFormat("yyyy-MM-dd@HH-mm");
        now = new Date();
        result = formatter.format(now);
        return result + "_生成裁决书.docx";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow mainWindow = new MainWindow();
                mainWindow.pack();
                mainWindow.setLocationRelativeTo(null);
                mainWindow.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_addAppEvidenceDoc;
    private javax.swing.JButton bn_addResEvidenceDoc;
    private javax.swing.JButton bn_chooseApplicationDoc;
    private javax.swing.JButton bn_chooseOutputFolder;
    private javax.swing.JButton bn_chooseResDoc;
    private javax.swing.JButton bn_chooseRoutineDoc;
    private javax.swing.JButton bn_generateOutDoc;
    private javax.swing.JButton bn_rmAppEvidenceDoc;
    private javax.swing.JButton bn_rmResEvidenceDoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    // End of variables declaration//GEN-END:variables
}
